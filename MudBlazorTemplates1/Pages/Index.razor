@page "/"
@inject ISnackbar Snackbar
@using ResponseModel;
@using System.IO;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Forms;
@using Services;

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    public UploadRequest uploadRequest = new UploadRequest();
    public byte[] FileBytes { get; set; }
    public string Name { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            fileNames.Add(file.Name);
            Name = file.Name;
            var fileB = e.File;
            using (var ms = new MemoryStream())
            {
                await fileB.OpenReadStream().CopyToAsync(ms);
                FileBytes = ms.ToArray();
            }
            //Name = file.Name;
            //var fileB = e.File;
            //var buffer = new byte[fileB.Size];
            //var stream = fileB.OpenReadStream();
            //await stream.ReadAsync(buffer);
            //FileBytes = buffer;
        }
        Upload();
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    private async Task Upload()
    {
        await UploadFile();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    protected async Task UploadFile()
    {

        HttpResponseMessage? response = new();

        try
        {
            uploadRequest.name = Name;
            uploadRequest.content = FileBytes;


            response = await apiService.HttpClient.PostAsJsonAsync("Datos", uploadRequest);
        }
        catch (HttpRequestException)
        {
            snackBar.Add("Error", Severity.Error);
            Console.WriteLine(response.Content.ToString());
        }
        try
        {
            response.EnsureSuccessStatusCode();
            snackBar.Add("Proceso Creado!", Severity.Info);
            Console.WriteLine(response.Content.ToString());
        }
        catch (HttpRequestException)
        {
            snackBar.Add($"Error", Severity.Error);
            Console.WriteLine(response.Content.ToString());
        }

    }





}